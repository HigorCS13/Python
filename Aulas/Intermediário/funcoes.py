# def - cria fun√ß√µes

def funcao(x,y):
	...

#recebem valores de par√¢metros(nomes)
#servem para simplificar repeti√ß√µes
#retorna valores de acordo com o solicitado (None por padr√£o)

#argumentos podem ser nomeados ou n√£o-nomeados(valor 'any', ent√£o recebe qualquer tipo de valor)
	# nomeados - tem nome com sinal de igual
	# n√£o-nomeados - recebe apenas argumentos

def soma(x,y):
	print(f'{x = } y = {y} | x + y =', x + y)

soma(1, 2) # n√£o-nomeados (posicionais)

def soma2(a,b):
	print(f'{a = } b = {b} | a + b =', a + b)

soma2(b = 'b', a = 'a') # nomeados (podem ser passados fora de ordem)
# sempre que um argumento anterior for nomeado(tanto fun√ßa√µ quanto chamada), o pr√≥ximo tamb√©m deve ser, ou executa ' keyword error'

#Refatorar == editar (-_-)

# Para situa√ß√µes em que seja necess√°ria a cria√ß√£o de um par√¢metro que possa ou n√£o ser utilizado, pode-se utilizar o None

def soma3(x, y, z = None):
	if z is not None:
		print(f'{x = } {y = } {z =} |', x + y + z)
	else:
		print(f'{x = } {y = } |', x + y)

soma3(1, 2, 3)
soma3(4, 5)

'''
Escopo de fun√ß√µes
Escopo - local onde o c√≥digo pode atingir.
Escopo local/global
local - escopo onde apenas nomes do mesmo local s√£o alcan√ßados (fun√ß√£o)
global - escopo onde todo o c√≥digo √© alcan√ß√°vel (programa)
'''
# variaveis anteriores, seguindo a regra a da escrita, podem ser acessadas por fun√ß√µes posteriores, por√©m toda variavel interna a fun√ß√£o √© 'protegida' pelo escopo local

#variaveis internas tem prioridade a variaveis externas, caso sejam iguais

#variaveis externas n√£o s√£o modificadas por fun√ß√µes de variaveis internas, se forem iguais

x = 1

def escopo():
	x = 10
	def escopo2():
		y = 2
		print(x, y)
	escopo2()
	print(x)

print(x)
escopo()
print(x)

#para a modifica√ß√£o extrena de variaveis internamente na fun√ß√£o, que tenham mesmo nome, se faz defindo o mesmo por 'global'

a = 2

print(a)

def globo():
	global a #defini√ß√£o de variavel global quando chamada a fun√ß√£o
	a = 20
globo()

print(a)

# o escopo determina uma busca de informa√ß√µes do c√≥digo, de dentro para fora
#call stack - visto em debug, sequencia logica em pilha para o fubncionamento do programa

#retorno (return) √© o comando que define qual ser√° o valor retornado dentro de uma fun√ß√£o

def soma(x, y):
	return x + y #sempre finaliza a fun√ß√£o

print(soma(1,2))

# caso n√£o seja especificado, toda fun√ß√£o retorna 'None'


#args - argumentos n√£o nomeados
# * / *args (empacotamento / desempacotamento)

x, y, *resto = 1, 2, 3, 4 #empacotamento

print(x, y, *resto)

def funcao2(*args):
	print(args, type(args))
	total = 0
	for numero in args:
		total += numero
	return total

numeros = 1,2,3,4,5,6


funcao_soma1 = funcao2(1,2,3)
print(funcao_soma1)

funcao_soma2 = funcao2(4,5,6)
print(funcao_soma2)

funcao_soma_max = funcao2(*numeros) #desempacotamento
print(funcao_soma_max)

print(sum(numeros)) #sum - fun√ß√£o padr√£o que executa a soma automaticamente, s√≥ podendo ser utilizado no m√°ximo dois argumentos, e podendo tamb√©m ser utilizado uma variavel de m√∫ltiplos argumentos

#Higher Order Function - Fun√ß√µes que podem receber e/ou retornar outras fun√ß√µes

#First-Class Functions - Fun√ß√µes que s√£o tratadas como outros tipos de dados comuns (strings, inteiros, etc...)

def saudacao1(msg, nome):
	return f'{msg}, {nome}!'

def executa(funcao, *args):
	return funcao(*args) #LEMBRAR DE DESEMPACOTAR

print(executa(saudacao1, 'Bom dia', 'Talita'))
# H√° possibilidade de executar chamada de fun√ß√£o dentro de outra fun√ß√£o

# Closure - aparentemente, uma fun√ß√£o que cria outra fun√ß√£o

def criar_saudacao(saudacao):
	def saudar(nome):
		return f'{saudacao}, {nome}!'
	return saudar

falar_bom_dia = criar_saudacao('Bom dia')
falar_boa_noite = criar_saudacao('Boa noite')

nomes = input('Insira nomes: ')
nomes = nomes.split()

for nome in nomes:
	print(falar_bom_dia(nome))
	print(falar_boa_noite(nome))

print()
#A primeira fun√ß√£o criada se torna "est√°tica" e pr√© programada, sendo preparada para executar uma chamada para a segunda fun√ß√£o, tornando editavel apenas nos pontos necess√°rios

#vari√°veis livres + nonlocal

def fora(x):
	a = x
	def dentro():
		print('Vari√°veis locais:', locals()) # demonstra as vari√°veis locais
		print(dentro.__code__.co_freevars) #demonstra as vari√°veis livres
		return a
	return dentro

dentro1 = fora (10)
dentro2 = fora (20)

print(dentro1())
print()
print(dentro2())
print()

def concatenar(string_inicial):
	valor_final = string_inicial
	def interna(valor_a_concatenar):
		nonlocal valor_final # para que n√£o ocorra erro, se indica usando nonlocal que a variavel n√£o pertence ao local atual
		valor_final += valor_a_concatenar
		return valor_final
	return interna

c = concatenar('a')
print(c('b'))
print(c('c'))
print(c('d'))
print()

'''
Fun√ß√µes Decoradoras e Decoradores

Decorar = Adicionar / Remover / Restringir / Alterar

	fun√ß√µes decoradoras decoram outras fun√ß√µes
	decoradores s√£o usados para fazer o Python usar fun√ß√µes decoradores em outras fun√ß√µes
'''

def funcao_decoradora(func):
	def interna(*args, **kwargs):
		print('Decorador executado')
		for arg in args:
			checa_parametro(arg)
		resultado = func(*args, **kwargs)
		print('O seu resultado foi:')
		return resultado
	return interna

@funcao_decoradora #syntax sugar - utilizado para incluir a fun√ß√£o decoradora
def inverte_string(string):
	print(f'{inverte_string.__name__}') #demonstra o nome atual em que a fun√ß√£o se tornou durante a decora√ß√£o
	return string[::-1]

def checa_parametro(param):
	if not isinstance(param, str):
		raise TypeError('Deve ser uma string')

'''
# caso n√£o tivesse utilizado syntax sugar 

checador_de_dados = funcao_decoradora(inverte_string)
inverte = checador_de_dados('Higor')
print()
'''

inverte = inverte_string('Higor')
print(inverte)
print()

#Decoradores s√£o "Syntax Sugar"

def fabrica_de_decoradores(a=None, b=None, c=None):
	def fabrica_de_funcoes(func):
		print('F√°brica de fun√ß√µes')
		
		def aninhada(*args, **kwargs):
			print('Aninhada')
			res = func(*args, **kwargs)
			return res
		return aninhada
	return fabrica_de_funcoes


#quando Decorada a fun√ß√£o, mesmo sem executar a interna, a externa executa

@fabrica_de_decoradores()
def soma (x, y):
	return x + y

dez_mais_cinco = soma(10, 5)
print(dez_mais_cinco)
print()

#utilizando-se de um decorador com variaveis, pode-se incrementar uma s√©rie de par√¢metros, tendo em vista a quantidade de escopos existentes

decoradora = fabrica_de_decoradores() 
multiplica = decoradora(lambda x, y : x * y)

dez_vezes_cinco = multiplica(10, 5)
print(dez_vezes_cinco)
print()



def decorador_param(nome):
	def decorador(func):
		print('Decorador', nome)
		
		def nova_funcao(*args, **kwargs):
			res = func(*args, **kwargs)
			final = f'{res} {nome}'
			return final
		return nova_funcao
	return decorador

#a sequ√™ncia de execu√ß√£o dos decoradores se d√° de maneira inversa a leitura padr√£o de c√≥digo

@decorador_param('3')
@decorador_param('2')
@decorador_param('1')
def soma (x, y):
	return x + y

dez_mais_cinco = soma(10, 5)
print(dez_mais_cinco)
print()


# Positional-Only Parameters (/) e Keyword-Only Arguments (*)


# *args (ilimitado de argumentos posicionais)
	# üü¢ Positional-only Parameters (/) - Tudo antes da barra deve ser ‚ùóÔ∏èAPENAS‚ùóÔ∏è posicional.
	# PEP 570 ‚Äì Python Positional-Only Parameters
	# https://peps.python.org/pep-0570/

# **kwargs (ilimitado de argumentos nomeados)
	# üü¢ Keyword-Only Arguments (*) - * sozinho ‚ùóÔ∏èN√ÉO SUGA‚ùóÔ∏è valores.
	# PEP 3102 ‚Äì Keyword-Only Arguments
	# https://peps.python.org/pep-3102/

def soma(a, b, /, *, c, **kwargs):
    print(kwargs)
    print(a + b + c)


soma(1, 2, c=3, nome='teste')
